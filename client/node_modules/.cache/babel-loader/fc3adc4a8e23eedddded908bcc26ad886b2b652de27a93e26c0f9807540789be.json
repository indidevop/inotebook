{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amey Sawalkar\\\\Desktop\\\\React\\\\inotebook\\\\src\\\\contexts\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setnotes] = useState(notesInitial);\n\n  // Get All Notes\n  const fetchallNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"auth-token\": localStorage.getItem('authtoken'),\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setnotes(json);\n    // console.log(json);\n  };\n\n  // Add Note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"auth-token\": localStorage.getItem('authtoken'),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setnotes(notes.concat(note));\n  };\n  const deleteNote = async id => {\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"auth-token\": localStorage.getItem('authtoken'),\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n  };\n\n  // Edit Note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"auth-token\": localStorage.getItem('authtoken'),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n\n    //Frontend update\n    let newNotes = JSON.parse(JSON.stringify(notes)); // incresed time so that it runs after update\n    for (const key in newNotes) {\n      if (newNotes[key]._id === id) {\n        newNotes[key].title = title;\n        newNotes[key].description = description;\n        newNotes[key].tag = tag;\n        break;\n      }\n    }\n    setnotes(newNotes);\n  };\n\n  // Alert functions\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  };\n  const getUser = async token => {\n    const response = await fetch(`http://localhost:5000/api/auth/getuser`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": token\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    localStorage.setItem('username', json.name);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      fetchallNotes,\n      alert,\n      showAlert,\n      getUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"ggNN8zcbVdO0dYOMyhSF7XQWdQg=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setnotes","fetchallNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","console","log","editNote","parse","key","alert","setalert","showAlert","message","type","msg","setTimeout","getUser","token","setItem","name","children"],"sources":["C:/Users/Amey Sawalkar/Desktop/React/inotebook/src/contexts/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n\r\n  const host = \"http://localhost:5000\"\r\n\r\n\r\n  const notesInitial = [];\r\n\r\n  const [notes, setnotes] = useState(notesInitial);\r\n  \r\n\r\n  // Get All Notes\r\n  const fetchallNotes = async () => {\r\n\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"auth-token\": localStorage.getItem('authtoken'),\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n\r\n    const json = await response.json();\r\n    setnotes(json)\r\n    // console.log(json);\r\n\r\n  }\r\n\r\n  // Add Note\r\n  const addNote = async (title, description, tag) => {\r\n\r\n    const response = await fetch(`${host}/api/notes/addnote`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"auth-token\": localStorage.getItem('authtoken'),\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ title, description, tag }),\r\n      })\r\n    const note = await response.json();\r\n    setnotes(notes.concat(note))\r\n  }\r\n\r\n  const deleteNote = async (id) => {\r\n\r\n    const newNotes = notes.filter((note) => { return note._id !== id });\r\n    setnotes(newNotes);\r\n\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"auth-token\": localStorage.getItem('authtoken'),\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n\r\n    const json = await response.json();\r\n    console.log(json);\r\n\r\n  }\r\n\r\n  // Edit Note\r\n  const editNote = async (id, title, description, tag) => {\r\n\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"auth-token\": localStorage.getItem('authtoken'),\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ title, description, tag }),\r\n      })\r\n    const json = await response.json();\r\n    console.log(json);\r\n\r\n    //Frontend update\r\n    let newNotes = JSON.parse(JSON.stringify(notes)) // incresed time so that it runs after update\r\n    for (const key in newNotes) {\r\n      if (newNotes[key]._id === id) {\r\n        newNotes[key].title = title;\r\n        newNotes[key].description = description;\r\n        newNotes[key].tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    setnotes(newNotes);\r\n\r\n  }\r\n\r\n  // Alert functions\r\n  const [alert, setalert] = useState(null)\r\n\r\n  const showAlert = (message, type) => {\r\n    setalert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setalert(null);\r\n    }, 3000);\r\n  }\r\n\r\n  \r\n  const getUser=async (token)=>{\r\n    const response = await fetch(`http://localhost:5000/api/auth/getuser`,\r\n    {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\":token\r\n        }\r\n    })\r\n\r\nconst json = await response.json();\r\nconsole.log(json);\r\nlocalStorage.setItem('username',json.name)\r\n}\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, fetchallNotes, alert, showAlert,getUser}}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}