{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amey Sawalkar\\\\Desktop\\\\React\\\\inotebook\\\\src\\\\contexts\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"localhost:5000\";\n  const notesInitial = [{\n    \"_id\": \"63e91d46dc397354edde0433\",\n    \"user\": \"63e8e85a1bba5c5cf92e6af0\",\n    \"title\": \"First note\",\n    \"description\": \"How is the day ?\",\n    \"tag\": \"Testing\",\n    \"date\": \"2023-02-12T17:09:26.519Z\",\n    \"__v\": 0\n  }, {\n    \"_id\": \"63e91db8dc397354edde0436\",\n    \"user\": \"63e8e85a1bba5c5cf92e6af0\",\n    \"title\": \"First note\",\n    \"description\": \"How is the day ?\",\n    \"tag\": \"Testing\",\n    \"date\": \"2023-02-12T17:11:20.903Z\",\n    \"__v\": 0\n  }, {\n    \"_id\": \"63e91db9dc397354edde0438\",\n    \"user\": \"63e8e85a1bba5c5cf92e6af0\",\n    \"title\": \"First note\",\n    \"description\": \"How is the day ?\",\n    \"tag\": \"Testing\",\n    \"date\": \"2023-02-12T17:11:21.829Z\",\n    \"__v\": 0\n  }];\n  const [notes, setnotes] = useState(notesInitial);\n  const addNote = async (title, description) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNlOGU4NWExYmJhNWM1Y2Y5MmU2YWYwIn0sImlhdCI6MTY3NjIxODc0OX0.pZUMLGHz98KnIComESUChvtGtrI8eiV05e-2FFPS6l8\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let note = {\n      \"_id\": \"63e91df9dc397354edde0438\",\n      \"user\": \"63e8e85a1bba5c5cf92e6af0\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": \"default\",\n      \"date\": \"2023-02-12T17:11:21.829Z\",\n      \"__v\": 0\n    };\n    setnotes(notes.concat(note));\n  };\n  const deleteNote = id => {\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n\n  // Edit Note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNlOGU4NWExYmJhNWM1Y2Y5MmU2YWYwIn0sImlhdCI6MTY3NjIxODc0OX0.pZUMLGHz98KnIComESUChvtGtrI8eiV05e-2FFPS6l8\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const json = response.json();\n    for (const key in notes) {\n      if (notes[key]._id === id) {\n        notes[key].title = title;\n        notes[key].description = description;\n        notes[key].tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"17KTT0fQ15Y6l1fhXF3AS0rkCqo=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setnotes","addNote","title","description","response","fetch","method","headers","body","JSON","stringify","tag","json","note","concat","deleteNote","id","newNotes","filter","_id","editNote","data","key","children"],"sources":["C:/Users/Amey Sawalkar/Desktop/React/inotebook/src/contexts/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n\r\n  const host = \"localhost:5000\"\r\n\r\n\r\n  const notesInitial = [\r\n    {\r\n      \"_id\": \"63e91d46dc397354edde0433\",\r\n      \"user\": \"63e8e85a1bba5c5cf92e6af0\",\r\n      \"title\": \"First note\",\r\n      \"description\": \"How is the day ?\",\r\n      \"tag\": \"Testing\",\r\n      \"date\": \"2023-02-12T17:09:26.519Z\",\r\n      \"__v\": 0\r\n    },\r\n    {\r\n      \"_id\": \"63e91db8dc397354edde0436\",\r\n      \"user\": \"63e8e85a1bba5c5cf92e6af0\",\r\n      \"title\": \"First note\",\r\n      \"description\": \"How is the day ?\",\r\n      \"tag\": \"Testing\",\r\n      \"date\": \"2023-02-12T17:11:20.903Z\",\r\n      \"__v\": 0\r\n    },\r\n    {\r\n      \"_id\": \"63e91db9dc397354edde0438\",\r\n      \"user\": \"63e8e85a1bba5c5cf92e6af0\",\r\n      \"title\": \"First note\",\r\n      \"description\": \"How is the day ?\",\r\n      \"tag\": \"Testing\",\r\n      \"date\": \"2023-02-12T17:11:21.829Z\",\r\n      \"__v\": 0\r\n    }\r\n  ]\r\n\r\n  const [notes, setnotes] = useState(notesInitial);\r\n\r\n  const addNote = async (title, description) => {\r\n\r\n    const response = await fetch(`${host}/api/notes/addnote`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNlOGU4NWExYmJhNWM1Y2Y5MmU2YWYwIn0sImlhdCI6MTY3NjIxODc0OX0.pZUMLGHz98KnIComESUChvtGtrI8eiV05e-2FFPS6l8\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body:JSON.stringify({title,description,tag}),\r\n      })\r\n      const json=response.json();\r\n\r\n\r\n    let note = {\r\n      \"_id\": \"63e91df9dc397354edde0438\",\r\n      \"user\": \"63e8e85a1bba5c5cf92e6af0\",\r\n      \"title\": title,\r\n      \"description\": description,\r\n      \"tag\": \"default\",\r\n      \"date\": \"2023-02-12T17:11:21.829Z\",\r\n      \"__v\": 0\r\n    }\r\n\r\n    setnotes(notes.concat(note))\r\n  }\r\n\r\n  const deleteNote = (id) => {\r\n\r\n    const newNotes = notes.filter((note) => { return note._id !== id });\r\n    setnotes(newNotes);\r\n  }\r\n\r\n  // Edit Note\r\n  const editNote = async (id, title, description, tag) => {\r\n\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNlOGU4NWExYmJhNWM1Y2Y5MmU2YWYwIn0sImlhdCI6MTY3NjIxODc0OX0.pZUMLGHz98KnIComESUChvtGtrI8eiV05e-2FFPS6l8\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body:JSON.stringify(data),\r\n      })\r\n      const json=response.json();\r\n\r\n      for (const key in notes) {\r\n         if(notes[key]._id===id)\r\n         {\r\n          notes[key].title=title;\r\n          notes[key].description=description;\r\n          notes[key].tag=tag;\r\n         }\r\n      }\r\n\r\n  }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}